if (!isNeedMineModule.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'com.alibaba.arouter'
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    defaultConfig {
        if (!isNeedMineModule.toBoolean()) {
            applicationId "com.king.mine"
        }
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
        testInstrumentationRunner rootProject.ext.dependencies["androidJUnitRunner"]
        //MultiDex分包方法
        multiDexEnabled true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
                includeCompileClasspath = true
            }
        }
    }
    //防止编译的时候oom、GC
    dexOptions {
        javaMaxHeapSize "4g"
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
    signingConfigs {
        config {
            keyAlias 'amd'
            keyPassword '123456'
            storeFile file('../key/amd.jsk')
            storePassword '123456'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.config
        }
        release {
            // 不显示Log
            //buildConfigField "boolean", "LOG_DEBUG", "false"
            //混淆
            minifyEnabled false
            //Zipalign优化
            //zipAlignEnabled true
            // 移除无用的resource文件
            //shrinkResources true
            signingConfig signingConfigs.config
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    //java插件引入了一个概念叫做SourceSets，通过修改SourceSets中的属性，可以指定哪些源文件
    //（ 或文件夹下的源文件 ） 要被编译 ， 哪些源文件要被排除 。
    sourceSets {
        main {
            if (Boolean.valueOf(isNeedMineModule.toBoolean())) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/debug文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':commonlib')
    //跨组件通信
    annotationProcessor rootProject.ext.dependencies["arouter-compiler"]
    //黄油刀
    annotationProcessor rootProject.ext.dependencies["butterknife-apt"]
    annotationProcessor rootProject.ext.dependencies["dagger2-apt-compiler"]
    annotationProcessor rootProject.ext.dependencies["glide_annotation"]
}